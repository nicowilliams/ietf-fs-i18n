



Internet Engineering Task Force                         N. Williams, Ed.
Internet-Draft                                         Cryptonector, LLC
Intended status: Best Current Practice                     June 10, 2020
Expires: December 12, 2020


   Internationalization Considerations for Filesystems and Filesystem
                               Protocols
                    draft-williams-filesystem-18n-00

Abstract

   This document describes requirements for internationalization (I18n)
   of filesystems specifically in the context of Internet protocols, the
   architecture for filesystems in most existing general purpose
   operating systems, and their implications for filesystem
   internationalization.  From the I18N requirements for filesystems and
   the architecture of running code we derive requirements and
   recommendations for implementors of operating systems and/or
   filesystems, as well as for Internet remote filesystem protocols.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 12, 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Williams                Expires December 12, 2020               [Page 1]

Internet-Draft           Accept-Auth & Redirect                June 2020


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   1.1.  Requirements Language . . . . . . . . . . . . . . . . . . .   3
   1.2.  Filesystem Internationalization . . . . . . . . . . . . . .   3
   1.2.1.  Normalization . . . . . . . . . . . . . . . . . . . . . .   3
   1.2.2.  Case Foldings for Case-Insensitivity  . . . . . . . . . .   4
   1.3.  Running Code Architecture Notes . . . . . . . . . . . . . .   5
   2.  Filesystem I18N Guidelines  . . . . . . . . . . . . . . . . .   8
   2.1.  Filesystem I18N Guidelines: Non-Unicode File names  . . . .   8
   2.2.  Filesystem I18N Guidelines: Case-Insensitivity  . . . . . .   8
   2.3.  I18N Versioning . . . . . . . . . . . . . . . . . . . . . .   8
   3.  Filesystem Protocol I18N Guidelines . . . . . . . . . . . . .   9
   3.1.  I18N and Caching in Filesystem Protocol Clients . . . . . .   9
   4.  Internationalization Considerations . . . . . . . . . . . . .   9
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  10
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  10
   7.1.  Normative References  . . . . . . . . . . . . . . . . . . .  10
   7.2.  Informative References  . . . . . . . . . . . . . . . . . .  10
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Introduction

   [TBD: Add references galore.  How to reference Unicode?  How to
   reference US-ASCII?  How best to reference HFS+?  How best to
   reference ZFS?  May have to find useful references for POSIX and
   WIN32.  Various blog entries may be of interest -- can they be
   referenced?]

   We, the Internet community, have long concluded that we must
   internationalize all our protocols.  This is generally not an easy
   task, as often we are constrained by the realities of what can be
   achieved while maintaining backwards compatibility.

   In this document we focus on filesystem internationalization (I18N),
   specifically only for file names and file paths.  Here we address the
   two main issues that arise in filesystem I18N:

   o  Unicode equivalence

   o  Case foldings for case-insensitivity




Williams                Expires December 12, 2020               [Page 2]

Internet-Draft           Accept-Auth & Redirect                June 2020


1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Filesystem Internationalization

   We must address two issues:

   o  Unicode equivalence

   o  Case foldings for case-insensitivity

   Unicode can represent certain character strings in multiple visually-
   and semantically-equivalent ways.  For example, there are two ways to
   express LATIN SMALL LETTER A WITH ACUTE:

   o  U+00E1

   o  U+0061 U+0301

   For some glyphs there is a single way to write them.  For others
   there are two.  And for yet others there can be many more than two.
   To deal with this, Unicode defines Normal Forms (NFs), of which there
   are two basic ones: Normal Form Composed (NFC), and Normal Form
   Decomposed (NFD).  There are also NFs that use "compatibility"
   Foldings, NFKC and NFKD.  Unicode-aware applications can normalize
   text to avoid ambiguities, or they can use form-insensitive string
   comparisons, or both.

   Some filesystems support case-insensitivity, which is trivial for US-
   ASCII, but non-trivial for Unicode, requiring not only larger case-
   folding tables, but also localized case-folding tables as case-
   folding rules might differ from languages to language.

1.2.1.  Normalization

   For case-sensitive filesystems, only equivalence issues arise as to
   file names and file paths.  These can be addressed in one of two
   ways:

   o  normalize file names when created and when looked up,

   o  perform form-insensitive string comparisons on lookup.

   The first option yields normalized file names on-disk and on the wire
   (e.g., when listing directories).  We shall term this "normalize-on-



Williams                Expires December 12, 2020               [Page 3]

Internet-Draft           Accept-Auth & Redirect                June 2020


   CREATE", or sometimes "normalize-on-CREATE-and-LOOKUP", or just "n-c/
   l".

   The second option preserves form as originally intended (if intended)
   or produced by the user or on their behalf by their systems' text
   input modes, but is form-insensitive.  That is, this option permits
   either encoding of, e.g., LATIN SMALL LETTER A WITH ACUTE on-disk and
   on the wire, but permits only one form of any string, whether normal
   or not.  We shall term this option "form-insensitive", or sometimes
   "form-insensitive and form-preserving", or just "f-i/p".

1.2.2.  Case Foldings for Case-Insensitivity

   Case-insensitivity implies folding characters of one case to another
   for comparison purposes, typically to lower-case.  These case
   foldings are defined by Unicode.  Generally, case-insensitive
   filesystems preserve original case just form-insensitive filesystems
   preserve original form.

   It is possible that some case foldings may have to vary by locale.  A
   commonly used example of character where case foldings that varies by
   locale is LATIN SMALL LETTER DOTLESS I (U+0131).

   Because case-insensitive filesystems preserve case as in the original
   (at create time), one option (which we do not endorse here) might be
   for case-insensitive filesystems to consider all of the following
   equivalent:

   o  LATIN CAPITAL LETTER I (U+0049)

   o  LATIN SMALL LETTER I (U+0069)

   o  LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)

   o  LATIN SMALL LETTER DOTLESS I (U+0131)

   Remote filesystem protocols often involve caching on clients, which
   caching may require knowledge of filesystem I18N settings in order to
   permit lookups to be performed using cached directory listings.  We
   do not specify any case foldings here.  Instead we will either create
   a registry of case folding tailorings, or use the Common Locale Data
   Repository (CLDR), then require that filesystems and servers be able
   to identify what case foldings are in effect for case-insensitive
   filesystems.







Williams                Expires December 12, 2020               [Page 4]

Internet-Draft           Accept-Auth & Redirect                June 2020


1.3.  Running Code Architecture Notes

   Surprisingly, almost all if not all general purpose operating systems
   in use today have a "virtual filesystem switch" (VFS) interface that
   permits the use of multiple different filesystem types on one system.
   The VFS is essentially a pluggable programming interface that
   includes functionality for routing calls from user processes to the
   appropriate filesystems.

   The VFS architecture was developed in the 1980s, before Unicode
   adoption.  It is not surprising then that in general -if not simply
   always today- the code path from the interface between a user
   application and the operating system all the way to the filesystem
   implements no I18N functionality, and does the absolute minimum of
   character data interpretation:

   o  use of US-ASCII NUL (for "C string" termination),

   o  use of US-ASCII '/' and/or '\' (for file path component
      delimiting).

   Thus in most if not all general purpose operating systems today, the
   code path from the boundary between the application and the operating
   system, and the boundary between the VFS and the filesystem, is
   "just-use-8" or "just-use-16" (as in UTF-16), with no attempt at
   normalization or case folding done anywhere in between.

   In practice this has led to I18N functionality residing strictly in
   the filesystem.  Two filesystems have defined the best current
   practices in this regard:

   o  HFS+, which does normalize-on-CREATE (and LOOKUP), normalizing to
      a form that is very close to NFD and is case-sensitive;

   o  ZFS, which implements form-insensitive, form-preserving behavior
      and optionally implements case-insensitive, case-preserving
      behavior on a per-filesystem bases.

   Filesystem protocol server implementations almost always, if not
   always, reside above the VFS layer in general purpose operating
   systems.

   Altogether, these circumstances make it very difficult to reliably
   locate I18N functionality above the VFS: there are too many places to
   alter, and all must agree exactly on I18N choices.  Moreover,
   implementing case-insensitive but case-preserving behavior above the
   VFS requires reading a directory, and so does implementing form-
   insensitive and form-preserving behavior.  The only behaviors that



Williams                Expires December 12, 2020               [Page 5]

Internet-Draft           Accept-Auth & Redirect                June 2020


   can be reliably implemented above the VFS are normalize- and case-
   fold- on-CREATE.

   Consider the set of already-running code that must all be modified in
   order to reliably implement I18N on general purpose operating
   systems:

   o  filesystem protocol servers, including but not limited to:

      *  Network File System (NFSv4) [RFC7530];

      *  Hypertext Transfer Protocol (HTTP) servers serving resources
         hosted on filesystems[RFC7230];

      *  SSH File Transfer Protocol (SFTP) [I-D.ietf-secsh-filexfer];

      *  various remote filesystem protocols that are not Internet
         Protocols (i.e., not standards-track Internet RFCs);

   o  POSIX system call layers or user process system call stub
      libraries;

   o  WIN32 system call layers or user process system call stub
      libraries.

   Regarding system calls and system call stubs in user process system
   libraries, the continued use of statically-linked executables means
   that these cannot reliably be modified.  The system call handlers
   cannot reliably inspect the calling process to determine any
   attributes of its locale.  Adding new system calls is possible, but
   existing statically-linked executables wouldn't use them.  For
   similar reasons, the VFS layer is generally (always) completely
   unaware of any attributes of the locale of applications calling it,
   whether via system calls or any other path.

   Unix-like operating systems are generally (always) "just-use-8",
   assuming only that file names and paths are C strings (i.e.,
   terminated by zero-valued bytes) and sufficiently compatible with US-
   ASCII that the file path component separator character, US-ASCII '/',
   is meaningful.  As a result, it is possible to find I18N-unaware
   filesystems with one or more non-Unicode, non-ASCII codesets in use
   for file names!  We shall not concern ourselves further with non-
   Unicode file names here, however.

   For these reasons it is simply not practical to implement I18N at any
   layer above the VFS.





Williams                Expires December 12, 2020               [Page 6]

Internet-Draft           Accept-Auth & Redirect                June 2020


   Even in the VFS, form- and case-insensitive and -preserving behaviors
   would be difficult to implement as performantly as in the filesystem.
   The VFS would have to list a directory completely before being able
   to apply those behaviors.  It is reasonable to expect caching clients
   of remote filesystems to cache directory listings (especially for
   offline operation), it isn't reasonable to expect the same of the
   VFS.  Compare to the filesystem itself, which can maintain a fast
   index (e.g., hash table or b-tree) where the keys are normalized and
   possibly case-folded file names and thus may not need to read all of
   a very large directory in order to perform fast lookups that are
   form- and even case-insensitive.

   The only way to implement I18N behaviors in the VFS layer rather than
   at the filesystem is to abandon form- and case-preserving behaviors.
   For case-insensitivity this would require using sentence-case, or all
   lower-case, perhaps, and would be surprising to users.  At any rate,
   that approach would also render much running code "non-compliant"
   with this specification.

   Therefore, generally speaking, only the filesystem can reliably,
   interoperably, and performantly implement I18N behaviors in general
   purpose operating systems.

   Note that variations in I18N behaviors can happen even on the same
   server with multiple filesystems of the same type.  This can happen
   because of

      different Unicode versions being used at the times of creation of
      various filesystems, and

      locale settings on each filesystem.

   Locale variations are only relevant to case-folding for case-
   insensitivity.  Running code mostly uses default case-folding rules,
   but there is not reason to assume that locale-specific case-folding
   rules won't be supported by running code in the future.

   It may not be possible or easy for a filesystem to adopt new Unicode
   versions, or adopt backwards-incompatible case foldings, after
   content has been created in it.  This implies that where a client for
   a remote filesystem must know what I18N functionality to implement
   for use with cached directory listings, the client must know
   specifically what profile of I18N functionality each cached
   filesystem implements.







Williams                Expires December 12, 2020               [Page 7]

Internet-Draft           Accept-Auth & Redirect                June 2020


2.  Filesystem I18N Guidelines

   We begin be recognizing and accepting that much running code
   implements I18N functionality at the filesystem.  Given this, we
   catalogue the range of acceptable behaviors.  Filesystems adhering to
   this specification MUST implement only acceptable I18N behaviors as
   specified here.  Acceptable variations may be registered in an IANA
   registry of filesystem I18N behaviors.

2.1.  Filesystem I18N Guidelines: Non-Unicode File names

   Filesystems SHOULD reject attempts to create new non-Unicode file
   names.

   Filesystems either MUST normalize on CREATE (and LOOKUP), or MUST be
   form-insensitive and form-preserving.

   Filesystems MUST specify a Unicode version for their normalization or
   form-insensitive behavior.

2.2.  Filesystem I18N Guidelines: Case-Insensitivity

   Filesystems MAY support case-insensitivity, in which case they SHOULD
   be case-preserving.  Filesystems that are case-insensitive but not
   case-preserving either MUST upcase or downcase all characters of file
   names, or MUST upcase the first character of file names and downcase
   the rest (a.k.a., "sentence case").

   Case foldings for case-insensitive filesystems MUST be identified.
   The default case foldings MUST be the default case algorithms for the
   identified Unicode version without additional tailoring.  Filesystems
   that use case algorithms tailored to specific locales SHOULD use case
   foldings registered in an IANA registry to be created along with this
   document.

   Case-insensitive filesystems MUST specify a Unicode version for their
   case-insensitive behavior.

2.3.  I18N Versioning

   Fileystems MUST identify a Unicode version for their I18N behaviors.
   Filesystems MAY adopt new Unicode versions, though it is understood
   that this may be difficult for non-empty filesystems.








Williams                Expires December 12, 2020               [Page 8]

Internet-Draft           Accept-Auth & Redirect                June 2020


3.  Filesystem Protocol I18N Guidelines

   Remote filesystem protocols that allow clients to perform lookups
   against cached directory listings MUST allow clients to discover all
   relevant I18N behaviors of the filesystem whence any given directory
   listing:

   o  whether the filesystem normalizes on CREATE (and LOOKUP), and if
      so, to what NF in what Unicode version;

   o  whether the filesystem is form-insensitive and form-preserving,
      and if so, in what Unicode version;

   o  whether the filesystem is case-insensitive and case-preserving,
      and if so, with what foldings (default or tailured, and if
      tailored provide an identifier for the set of foldings), and a
      Unicode version.

   Foldings are identified via a folding set name as registered in an
   IANA registry created along with this document.

   File servers MUST reject attempts to create new non-Unicode file
   names.

3.1.  I18N and Caching in Filesystem Protocol Clients

   Caching clients of remote filesystems either MUST NOT perform lookups
   against cached directory listings, or MUST query the directories'
   filesystems' I18N profiles and apply the same I18N equivalent form
   policis and case-insensitivity case foldings.

4.  Internationalization Considerations

   This document deals in internationalization throughout.  Limitations
   having to do with running code and versioning considerations are by
   and large accepted.

5.  IANA Considerations

   [ALTERNATIVELY use locale names and CLDR?  Need to establish
   stability...  But CLDR ]

   We hereby request the creation of a new IANA registry with Expert
   Review registration rules with the following fields:

   o  name, an identifier-like name

   o  Unicode version number



Williams                Expires December 12, 2020               [Page 9]

Internet-Draft           Accept-Auth & Redirect                June 2020


   o  listing of case folding tailorings and/or references to external
      case folding tailoring specifications

   The case foldings registered here will be used by case-insensitive
   filesystems and filesystem protocols to identify tailored case
   foldings so that caching clients can implement the same case-
   insensitive behavior using cached directory listings.

6.  Security Considerations

   The methods of handling equivalent Unicode strings cause aliasing.
   This is not expected to be a security problem.

   Case-insensitivity causes aliasing.  This is not expected to be a
   security problem.

   No effort is made here to handle confusables.  This is not expected
   to be a serious security problem.

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

7.2.  Informative References

   [I-D.ietf-secsh-filexfer]
              Galbraith, J. and O. Saarenmaa, "SSH File Transfer
              Protocol", draft-ietf-secsh-filexfer-13 (work in
              progress), July 2006.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7530]  Haynes, T., Ed. and D. Noveck, Ed., "Network File System
              (NFS) Version 4 Protocol", RFC 7530, DOI 10.17487/RFC7530,
              March 2015, <https://www.rfc-editor.org/info/rfc7530>.








Williams                Expires December 12, 2020              [Page 10]

Internet-Draft           Accept-Auth & Redirect                June 2020


Author's Address

   Nico Williams (editor)
   Cryptonector, LLC
   Austin, TX
   USA

   Email: nico@cryptonector.com











































Williams                Expires December 12, 2020              [Page 11]
