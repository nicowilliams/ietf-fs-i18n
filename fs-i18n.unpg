



Internet Engineering Task Force                         N. Williams, Ed.
Internet-Draft                                         Cryptonector, LLC
Intended status: Best Current Practice                      June 9, 2020
Expires: December 11, 2020


   Internationalization Considerations for Filesystems and Filesystem
                               Protocols
                    draft-williams-filesystem-18n-00

Abstract

   This document describes requirements for internationalization (I18n)
   of filesystems specifically in the context of Internet protocols, the
   architecture for filesystems in most existing general purpose
   operating systems, and their implications for filesystem
   internationalization.  From the I18N requirements for filesystems and
   the architecture of running code we derive requirements and
   recommendations for implementors of operating systems and/or
   filesystems, as well as for Internet remote filesystem protocols.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 11, 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   1.1.  Requirements Language
   2.  Requirements for Filesystem Internationalization
   2.1.  Equivalence
   2.2.  Case Mappings for Case-Insensitivity
   3.  Running Code Architecture Notes
   4.  Filesystem I18N Guidelines
   4.1.  Filesystem I18N Guidelines: Equivalence
   4.2.  Filesystem I18N Guidelines: Case-Insensitivity
   4.3.  I18N Versioning
   5.  Filesystem Protocol I18N Guidelines
   5.1.  I18N and Caching in Filesystem Protocol Clients
   6.  Internationalization Considerations
   7.  IANA Considerations
   8.  Security Considerations
   9.  Normative References
   Author's Address

1.  Introduction

   [TBD: Add references galore.]

   We, the Internet community, have long concluded that we must
   internationalize all our protocols.  This is generally not an easy
   task, as often we are constrained by the realities of what can be
   achieved while maintaining backwards compatibility.

   In this document we foxus on filesystem internationalization (I18N),
   specifically only for file names and file paths.  Here we address the
   two main issues that arise in filesystem I18N:

   o  Unicode equivalence

   o  Case mappings for case-insensitivity

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

2.  Requirements for Filesystem Internationalization

   We must address two issues:

   o  Unicode equivalence

   o  Case mappings for case-insensitivity

   Unicode can represent certain character strings in multiple visually-
   and semantically-equivalent ways.  For example, there are two ways to
   express LATIN SMALL LETTER A WITH ACUTE:

   o  U+00E1

   o  U+0061 U+0301

   For some glyphs there is a single way to write them.  For others
   there are two.  And for yet others there can be many more than two.
   To deal with this, Unicode defines Normal Forms (NFs), of which there
   are two basic ones: Normal Form Composed (NFC), and Normal Form
   Decomposed (NFD).  There are also NFs that use "compatibility"
   mappings, NFKC and NFKD.  Unicode-aware applications can normalize
   text to avoid ambiguities, or they can use form-insensitive string
   comparisons, or both.

   Some filesystems support case-insensitivity, which is trivial for US-
   ASCII, but non-trivial for Unicode, requiring not only larger case-
   mapping tables, but also localized case-mapping tables as case-
   mapping rules might differ from languages to language.

2.1.  Equivalence

   For case-sensitive filesystems, only equivalence issues arise as to
   file names and file paths.  These can be addressed in one of two
   ways:

   o  normalize file names when created and when looked up,

   o  perform form-insensitive string comparisons on lookup.

   The first option yields normalized file names on-disk and on the wire
   (e.g., when listing directories).  We shall term this "normalize-on-
   CREATE", or sometimes "normalize-on-CREATE-and-LOOKUP", or just "n-c/
   l".

   The second option preserves form as originally intended (if intended)
   or produced by the user or on their behalf by their systems' text
   input modes, but is form-insensitive.  That is, this option permits
   either encoding of, e.g., LATIN SMALL LETTER A WITH ACUTE on-disk and
   on the wire, but permits only one form of any string, whether normal
   or not.  We shall term this option "form-insensitive", or sometimes
   "form-insensitive and form-preserving", or just "f-i/p".

2.2.  Case Mappings for Case-Insensitivity

   Case-insensitivity implies mapping characters of one case to another
   for comparison purposes.  The case mappings for this are defined by
   Unicode.  Generally, case-insensitive filesystems preserve original
   case just form-insensitive filesystems preserve original form.

   It is possible that some case mappings may have to vary by locale.  A
   commonly used example of character where case mapping that varies by
   locale is LATIN SMALL LETTER DOTLESS I (U+0131).

   Because case-insensitive filesystems preserve case as in the original
   (at create time), one option (which we do not endorse here) is for
   case-insensitive filesystems to consider all of the following
   equivalent:

   o  LATIN CAPITAL LETTER I (U+0049)

   o  LATIN SMALL LETTER I (U+0069)

   o  LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)

   o  LATIN SMALL LETTER DOTLESS I (U+0131)

   We shouldn't have to specify any case mappings.  Ideally we could
   leave those and localization considerations entirely up to the
   Unicode standards and users.  However, remote filesystem protocols
   often involve caching on clients, which caching may require knowledge
   of filesystem I18N settings in order to permit lookups to be
   performed using cached directory listings.

3.  Running Code Architecture Notes

   Surprisingly, almost all if not all general purpose operating systems
   in use today have a "virtual filesystem switch" (VFS) interface that
   permits the use of multiple different filesystem types on one system.
   The VFS is essentially a pluggable programming interface that
   includes functionality for routing calls from user processes to the
   appropriate filesystems.

   The VFS architecture was developed in the 1980s, before Unicode
   adoption.  It is not surprising then that in general -if not simply
   always today- the code path from the interface between a user
   application and the operating system all the way to the filesystem
   implements no I18N functionality, and does the absolute minimum of
   character data interpretation:

   o  use of US-ASCII NUL (for "C string" termination),

   o  use of US-ASCII '/' and/or '\' (for file path component
      delimiting).

   Thus in most if not all general purpose operating systems today, the
   code path from the boundary between the application and the operating
   system, and the boundary between the VFS and the filesystem, is
   "just-use-8" or "just-use-16" (as in UTF-16), with no attempt at
   normalization or case mapping done anywhere in between.

   In practice this has led to I18N functionality residing strictly in
   the filesystem.  Two filesystems have defined the best current
   practices in this regard:

   o  HFS+, which does normalize-on-CREATE (and LOOKUP), normalizing to
      a form that is very close to NFD and is case-sensitive;

   o  ZFS, which implements form-insensitive, form-preserving behavior
      and optionally implements case-insensitive, case-preserving
      behavior on a per-filesystem bases.

   Filesystem protocol server implementations almost always, if not
   always, reside above the VFS layer in general purpose operating
   systems.

   Altogether, these circumstances make it very difficult to reliably
   locate I18N functionality above the VFS: there are too many places to
   alter, and all must agree exactly on I18N choices.  Moreover,
   implementing case-insensitive but case-preserving behavior above the
   VFS requires reading a directory, and so does implementing form-
   insensitive and form-preserving behavior.  The only behaviors that
   can be reliably implemented above the VFS are normalize- and case-
   fold- on-CREATE.

   Consider the set of already-running code that must all be modified in
   order to reliably implement I18N on general purpose operating
   systems:

   o  filesystem protocol servers

   o  POSIX system call layers or user process system call stub
      libraries

   o  WIN32 system call layers or user process system call stub
      libraries

   It is simply not feasible to implement I18N at any laye above the
   VFS.  Even in the VFS, form- and case-preserving behaviors would be
   impossible to implement as performantly as in the filesystem.
   Therefore, only the filesystem can reliably and interoperably
   implement I18N behaviors in general purpose operating systems, unless
   we dictate that form- and case-preserving behaviors must be
   abandoned, in which case the VFS may be made responsible for I18N
   instead of the filesystem.

   The fact that form- and case-preserving behaviors exist in
   filesystems today really means we cannot reasonably forbid those
   behaviours in Internet filesystem protocols.

   Since filesystems must ultimately be responsible for I18N,
   filesystems can also vary in the behaviors they implement.  This can
   happen because of

      Unicode versioning

      and because case-(in)sensitivity is often an option for the
      administrator, and often per-filesystem.

   Lastly, note that form- and case-insensitive and -preserving
   behaviors complicate the use of cached directory listings for
   optimizing lookups on the client side of remote filesystem protocols.
   It may not be possible or easy for a filesystem to adopt new Unicode
   versions, or adopt backwards-incompatible case mappings, after
   content has been created in it.  This implies that where a client for
   a remote filesystem must know what I18N functionality to implement
   for use with cached directory listings, the client must know
   specifically what profile of I18N functionality each cached
   filesystem implements.  Therefore we should specify a registry of
   such profiles.

4.  Filesystem I18N Guidelines

   We begin be recognizing and accepting that much running code
   implements I18N functionality at the filesystem.  Given this, we
   catalogue the range of acceptable behaviors.  Filesystems adhering to
   this specification MUST implement only acceptable I18N behaviors as
   specified here.  Acceptable variations may be registered in an IANA
   registry of filesystem I18N behaviors.

4.1.  Filesystem I18N Guidelines: Equivalence

   ...

4.2.  Filesystem I18N Guidelines: Case-Insensitivity

   ...

4.3.  I18N Versioning

   ...

5.  Filesystem Protocol I18N Guidelines

5.1.  I18N and Caching in Filesystem Protocol Clients

   ...

6.  Internationalization Considerations

   This document deals in internationalization throughout.  Limitations
   having to do with running code and versioning considerations are by
   and large accepted.

7.  IANA Considerations

   [TBD: Request the creation of a registry of filesystem I18N behaviors
   for equivalence and case-insensitivity.  These are needed so that
   caching clients can implement the same behaviors using cached
   directory listings.]

8.  Security Considerations

   This document has no security considerations.  [Well, what about
   confusables?  mostly, confusables should be a non-issue in
   filesystems.]

9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

Author's Address

   Nico Williams (editor)
   Cryptonector, LLC
   Austin, TX
   USA

   Email: nico@cryptonector.com

