<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC7230 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
  <!ENTITY RFC7530 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7530.xml">
  <!ENTITY SFTP SYSTEM 'https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-secsh-filexfer.xml'>
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocindent="no"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="bcp" docName="draft-williams-filesystem-18n-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <front>
    <title abbrev="Accept-Auth &amp; Redirect">Internationalization Considerations for Filesystems and Filesystem Protocols</title>
    <author fullname="Nico Williams" initials="N.W." surname="Williams" role="editor">
      <organization>Cryptonector, LLC</organization>
      <address>
        <postal>
          <street></street>
          <city>Austin</city>
          <region>TX</region>
          <code></code>
          <country>USA</country>
        </postal>
        <phone></phone>
        <email>nico@cryptonector.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date year="2020" />
    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>Filesystem</keyword>
    <keyword>FS</keyword>
    <keyword>Internationalziation</keyword>
    <keyword>I18N</keyword>

    <abstract>
      <t>
        This document describes requirements for internationalization
        (I18n) of filesystems specifically in the context of Internet
        protocols, the architecture for filesystems in most existing
        general purpose operating systems, and their implications for
        filesystem internationalization.  From the I18N requirements for
        filesystems and the architecture of running code we derive
        requirements and recommendations for implementors of operating
        systems and/or filesystems, as well as for Internet remote
        filesystem protocols.
      </t>
    </abstract>

  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>
        [TBD: Add references galore.  How to reference Unicode?  How to
        reference US-ASCII?  How best to reference HFS+?  How best to
        reference ZFS?  May have to find useful references for POSIX and
        WIN32.  Various blog entries may be of interest -- can they be
        referenced?]
      </t>

      <t>
        We, the Internet community, have long concluded that we must
        internationalize all our protocols.  This is generally not an
        easy task, as often we are constrained by the realities of what
        can be achieved while maintaining backwards compatibility.
      </t>

      <t>
        In this document we focus on filesystem internationalization
        (I18N), specifically only for file names and file paths.  Here
        we address the two main issues that arise in filesystem I18N:
        <list style="symbols">
          <t>Unicode equivalence</t>
          <t>Case foldings for case-insensitivity</t>
        </list>
      </t>

      <section anchor="rfc2119_terms" title="Requirements Language">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref
            target="RFC2119">RFC 2119</xref>.
        </t>
      </section>

      <section anchor="intro_fs_i18n" title="Filesystem Internationalization">
        <t>
          We must address two issues:
          <list style="symbols">
            <t>Unicode equivalence</t>
            <t>Case foldings for case-insensitivity</t>
          </list>
        </t>

        <t>
          Unicode can represent certain character strings in multiple
          visually- and semantically-equivalent ways.  For example, there
          are two ways to express LATIN SMALL LETTER A WITH ACUTE:
          <list style="symbols">
            <t>U+00E1</t>
            <t>U+0061 U+0301</t>
          </list>
        </t>

        <t>
          For some glyphs there is a single way to write them.  For
          others there are two.  And for yet others there can be many more
          than two.  To deal with this, Unicode defines Normal Forms
          (NFs), of which there are two basic ones: Normal Form Composed
          (NFC), and Normal Form Decomposed (NFD).  There are also NFs
          that use "compatibility" Foldings, NFKC and NFKD.  Unicode-aware
          applications can normalize text to avoid ambiguities, or they
          can use form-insensitive string comparisons, or both.
        </t>

        <t>
          Some filesystems support case-insensitivity, which is trivial
          for US-ASCII, but non-trivial for Unicode, requiring not only
          larger case-folding tables, but also localized case-folding
          tables as case-folding rules might differ from languages to
          language.
        </t>

        <section anchor="intro_norm" title="Canonical Equivalence (Normalization)">
          <t>
            For case-sensitive filesystems, only Unicode canonical
            equivalence issues arise as to file names and file paths.
            These can be addressed in one of two ways:
            <list style="symbols">
              <t>normalize file names when created and when looked up,</t>
              <t>perform form-insensitive string comparisons on lookup.</t>
            </list>
          </t>

          <t>
            The first option yields normalized file names on-disk and on
            the wire (e.g., when listing directories).  We shall term this
            "normalize-on-CREATE", or sometimes
            "normalize-on-CREATE-and-LOOKUP", or just "n-c/l".
          </t>

          <t>
            The second option preserves form as originally intended (if
            intended) or produced by the user or on their behalf by their
            systems' text input modes, but is form-insensitive.  That is,
            this option permits either encoding of, e.g., LATIN SMALL
            LETTER A WITH ACUTE on-disk and on the wire, but permits only
            one form of any string, whether normal or not.  We shall term
            this option "form-insensitive", or sometimes "form-insensitive
            and form-preserving", or just "f-i/p".
          </t>

          <t>
            Unicode compatibility equivalence allows equivalence between
            different representations of the same abstract character
            that may nonetheless have different visual appearance of
            behavior.  There are two canonical forms that support
            compatibility equivalence: NFKC and NFKD.  Using
            normalize-on-CREATE with NFKC or NFKD is may be surprising
            to users in a visual way.  While form-insensitivity with NFKC
            or NFKD may surprise users who might consider two file names
            distinct when Unicode considers them equivalent under
            compatibility equivalence.  The latter seems less likely and
            less surprising, though that is an entirely subjective
            judgement.
          </t>
        </section>

        <section anchor="intro_case" title="Case Foldings for Case-Insensitivity">
          <t>
            Case-insensitivity implies folding characters of one case to
            another for comparison purposes, typically to lower-case.
            These case foldings are defined by Unicode.  Generally,
            case-insensitive filesystems preserve original case just
            form-insensitive filesystems preserve original form.
          </t>

          <t>
            It is possible that some case foldings may have to vary by
            locale.  A commonly used example of character where case
            foldings that varies by locale is LATIN SMALL LETTER DOTLESS I
            (U+0131).
          </t>
          
          <t>
            Because case-insensitive filesystems preserve case
            as in the original (at create time), one option (which we do
            not endorse here) might be for case-insensitive filesystems
            to consider all of the following equivalent:
            <list style="symbols">
              <t>LATIN CAPITAL LETTER I (U+0049)</t>
              <t>LATIN SMALL LETTER I (U+0069)</t>
              <t>LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</t>
              <t>LATIN SMALL LETTER DOTLESS I (U+0131)</t>
            </list>
          </t>

          <t>
            Remote filesystem protocols often involve caching
            on clients, which caching may require knowledge of
            filesystem I18N settings in order to permit lookups to be
            performed using cached directory listings.  We do not
            specify any case foldings here.  Instead we will either
            create a registry of case folding tailorings, or use the
            Common Locale Data Repository (CLDR), then require that
            filesystems and servers be able to identify what case
            foldings are in effect for case-insensitive filesystems.
          </t>
        </section>
      </section>

      <section anchor="arch_notes" title="Running Code Architecture Notes">
        <t>
          Surprisingly, almost all if not all general purpose operating
          systems in use today have a "virtual filesystem switch" (VFS)
          interface that permits the use of multiple different filesystem
          types on one system.  The VFS is essentially a pluggable
          programming interface that includes functionality for routing
          calls from user processes to the appropriate filesystems.
        </t>

        <t>
          The VFS architecture was developed in the 1980s, before Unicode
          adoption.  It is not surprising then that in general -if not
          simply always today- the code path from the interface between a
          user application and the operating system all the way to the
          filesystem implements no I18N functionality, and does the
          absolute minimum of character data interpretation:
          <list style="symbols">
            <t>use of US-ASCII NUL (for "C string" termination),</t>
            <t>use of US-ASCII '/' and/or <![CDATA['\']]> (for file path
              component delimiting).</t>
          </list>
        </t>

        <t>
          Thus in most if not all general purpose operating systems today,
          the code path from the boundary between the application and the
          operating system, and the boundary between the VFS and the
          filesystem, is "just-use-8" or "just-use-16" (as in UTF-16),
          with no attempt at normalization or case folding done anywhere
          in between.
        </t>

        <t>
          In practice this has led to I18N functionality residing strictly
          in the filesystem.  Two filesystems have defined the best
          current practices in this regard:
          <list style="symbols">
            <t>
              HFS+, which does normalize-on-CREATE (and LOOKUP),
              normalizing to a form that is very close to NFD and is
              case-sensitive;</t>
            <t>
              ZFS, which implements form-insensitive, form-preserving
              behavior and optionally implements case-insensitive,
              case-preserving behavior on a per-filesystem basis.
            </t>
          </list>
        </t>

        <t>
          There are filesystem servers that access raw storage directly
          and implement the filesystem and the remote filesystem
          protocol server in one monolythic stack, but it is very common
          to have remote filesystem protocol servers implemented on top
          of the VFS or on top of the system calls.
        </t>

        <t>
          Altogether, these circumstances make it very difficult to
          reliably an dalways locate I18N functionality above the VFS,
          or to not use a VFS at all: there are too many places to
          alter, and all must agree exactly on I18N choices.  Moreover,
          implementing case-insensitive but case-preserving behavior
          above the VFS requires reading a directory, and so does
          implementing form-insensitive and form-preserving behavior.
          The only behaviors that can be reliably implemented above the
          VFS are normalize- and case-fold-on-CREATE.
        </t>

        <t>
          Consider the set of already-running code that must all be
          modified in order to reliably implement I18N on general purpose
          operating systems:
          <list style="symbols">
            <t>
              filesystem protocol servers, including but not limited to:
              <list style="symbols">
                <t>Network File System (NFSv4) <xref target="RFC7530"/>;</t>
                <t>
                  Hypertext Transfer Protocol (HTTP) servers serving
                  resources hosted on filesystems<xref target="RFC7230"/>;
                </t>
                <t>
                  SSH File Transfer Protocol (SFTP)
                  <xref target="I-D.ietf-secsh-filexfer"/>;
                </t>
                <t>
                  various remote filesystem protocols that are not
                  Internet Protocols (i.e., not standards-track Internet
                  RFCs);
                </t>
              </list>
            </t>
            <t>POSIX system call layers or user process system call stub libraries;</t>
            <t>WIN32 system call layers or user process system call stub libraries.</t>
          </list>
        </t>

        <t>
          Regarding system calls and system call stubs in user process
          system libraries, the continued use of statically-linked
          executables means that these cannot reliably be modified.  The
          system call handlers cannot reliably inspect the calling
          process to determine any attributes of its locale.  Adding new
          system calls is possible, but existing statically-linked
          executables wouldn't use them.  For similar reasons, the VFS
          layer is generally (always) completely unaware of any
          attributes of the locale of applications calling it, whether
          via system calls or any other path.
        </t>

        <t>
          Unix-like operating systems are generally (always)
          "just-use-8", assuming only that file names and paths are C
          strings (i.e., terminated by zero-valued bytes) and
          sufficiently compatible with US-ASCII that the file path
          component separator character, US-ASCII '/', is meaningful.
          As a result, it is possible to find I18N-unaware filesystems
          with one or more non-Unicode, non-ASCII codesets in use for
          file names!  We shall not concern ourselves further with
          non-Unicode file names here, however.
        </t>

        <t>
          For these reasons it is simply not practical to implement I18N
          at any layer above the VFS.
        </t>

        <t>
          Even in the VFS, form- and case-insensitive and -preserving
          behaviors would be difficult to implement as performantly as
          in the filesystem.  The VFS would have to list a directory
          completely before being able to apply those behaviors.  It
          is reasonable to expect caching clients of remote filesystems
          to cache directory listings (especially for offline
          operation), it isn't reasonable to expect the same of the VFS.
          Compare to the filesystem itself, which can maintain a fast
          index (e.g., hash table or b-tree) where the keys are
          normalized and possibly case-folded file names and thus may
          not need to read all of a very large directory in order to
          perform fast lookups that are form- and even case-insensitive.
        </t>

        <t>
          The only way to implement I18N behaviors in the VFS layer
          rather than at the filesystem is to abandon form- and
          case-preserving behaviors.  For case-insensitivity this would
          require using sentence-case, or all lower-case, perhaps, and
          would be surprising to users.  At any rate, that approach
          would also render much running code "non-compliant" with this
          specification.
        </t>

        <t>
          Therefore, generally speaking, only the filesystem can
          reliably, interoperably, and performantly implement I18N
          behaviors in general purpose operating systems.
        </t>

        <t>
          Note that variations in I18N behaviors can happen even on the
          same server with multiple filesystems of the same type.  This
          can happen because of
          <list>
            <t>different Unicode versions being used at the times of
              creation of various filesystems, and</t>
            <t>locale settings on each filesystem.</t>
          </list>
        </t>

        <t>
          Locale variations are only relevant to case-folding for
          case-insensitivity.  Running code mostly uses default
          case-folding rules, but there is not reason to assume that
          locale-specific case-folding rules won't be supported by
          running code in the future.
        </t>

        <t>
          It may not be possible or easy for a filesystem to adopt new
          Unicode versions, or adopt backwards-incompatible case
          foldings, after content has been created in it.  This implies
          that where a client for a remote filesystem must know what
          I18N functionality to implement for use with cached directory
          listings, the client must know specifically what profile of
          I18N functionality each cached filesystem implements.
        </t>
      </section>
    </section>

    <section anchor="guidelines_fs" title="Filesystem I18N Guidelines">
      <t>
        We begin be recognizing and accepting that much running code
        implements I18N functionality at the filesystem.  Given this, we
        catalogue the range of acceptable behaviors.  Filesystems
        adhering to this specification MUST implement only acceptable
        I18N behaviors as specified here.  Acceptable variations may be
        registered in an IANA registry of filesystem I18N behaviors.
      </t>

      <section anchor="guidelines_fs_equiv" title="Filesystem I18N Guidelines: Non-Unicode File names">
        <t>
          Filesystems SHOULD reject attempts to create new non-Unicode
          file names.
        </t>

        <t>
          Filesystems either MUST normalize on CREATE (and LOOKUP), or
          MUST be form-insensitive and form-preserving.
        </t>

        <t>Filesystems MUST specify a Unicode version for their
          normalization or form-insensitive behavior.</t>
      </section>

      <section anchor="guidelines_fs_case" title="Filesystem I18N Guidelines: Case-Insensitivity">
        <t>
          Filesystems MAY support case-insensitivity, in which case they
          SHOULD be case-preserving.  Filesystems that are
          case-insensitive but not case-preserving either MUST upcase or
          downcase all characters of file names, or MUST upcase the first
          character of file names and downcase the rest (a.k.a.,
          "sentence case").
        </t>

        <t>
          Case foldings for case-insensitive filesystems MUST be
          identified.  The default case foldings MUST be the default
          case algorithms for the identified Unicode version without
          additional tailoring.  Filesystems that use case algorithms
          tailored to specific locales SHOULD use case foldings
          registered in an IANA registry to be created along with this
          document.
        </t>

        <t>
          Case-insensitive filesystems MUST specify a Unicode version
          for their case-insensitive behavior.
        </t>
      </section>

      <section anchor="guidelines_fs_i18n_versioning" title="I18N Versioning">
        <t>
          Fileystems MUST identify a Unicode version for their I18N
          behaviors.  Filesystems MAY adopt new Unicode versions, though
          it is understood that this may be difficult for non-empty
          filesystems.
        </t>
      </section>
    </section>

    <section anchor="guidelines_proto" title="Filesystem Protocol I18N Guidelines">
      <t>
        Remote filesystem protocols that allow clients to perform
        lookups against cached directory listings MUST allow clients
        to discover all relevant I18N behaviors of the filesystem
        whence any given directory listing:
        <list style="symbols">
          <t>whether the filesystem normalizes on CREATE (and LOOKUP),
            and if so, to what NF in what Unicode version;</t>
          <t>whether the filesystem is form-insensitive and
            form-preserving, and if so, in what Unicode version;</t>
          <t>whether the filesystem is case-insensitive and
            case-preserving, and if so, with what foldings (default or
            tailured, and if tailored provide an identifier for the set
            of foldings), and a Unicode version.</t>
        </list>
        Foldings are identified via a folding set name as registered
        in an IANA registry created along with this document.
      </t>

      <t>
        Because some filesystems might allow for different I18N settings
        on a per-directory basis, remote filesystem protocols SHOULD
        allow those settings to be discoverable on a per-directory
        basis.
      </t>

      <t>
        File servers MUST reject attempts to create new non-Unicode file
        names.
      </t>

      <section anchor="guidelines_caching" title="I18N and Caching in Filesystem Protocol Clients">
        <t>
          Caching clients of remote filesystems either MUST NOT perform
          lookups against cached directory listings, or MUST query the
          directories' filesystems' I18N profiles and apply the same
          I18N equivalent form policis and case-insensitivity case
          foldings.
        </t>
      </section>
    </section>

    <section anchor="cons_i18n" title="Internationalization Considerations">
      <t>
        This document deals in internationalization throughout.
        Limitations having to do with running code and versioning
        considerations are by and large accepted.
      </t>
    </section>

    <section anchor="cons_iana" title="IANA Considerations">
      <t>
        [ALTERNATIVELY use locale names and CLDR?  Need to determine
        the stability of CLDR locales...  Basically, we need stable
        locale names, and stable case-folding mappings.]
      </t>

      <t>
        We hereby request the creation of a new IANA registry with
        Expert Review registration rules with the following fields:
        <list style="symbols">
          <t>name, an identifier-like name</t>
          <t>Unicode version number</t>
          <t>listing of case folding tailorings and/or references to
            external case folding tailoring specifications</t>
        </list>
      </t>

      <t>
        The case foldings registered here will be used by
        case-insensitive filesystems and filesystem protocols to
        identify tailored case foldings so that caching clients can
        implement the same case-insensitive behavior using cached
        directory listings.
      </t>
    </section>

    <section anchor="cons_sec" title="Security Considerations">
      <t>
        The methods of handling equivalent Unicode strings cause
        aliasing.  This is not expected to be a security problem.
      </t>

      <t>
        Case-insensitivity causes aliasing.  This is not expected to be
        a security problem.
      </t>

      <t>
        No effort is made here to handle confusables.  This is not
        expected to be a serious security problem.
      </t>
    </section>
  </middle>
  <back>

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References">
      <!--?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;
    </references>

    <references title="Informative References">
      &RFC7230;
      &RFC7530;
      &SFTP;
    </references>
  </back>
</rfc>
